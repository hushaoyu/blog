{"meta":{"title":"漫漫前端路","subtitle":"业精于勤，荒于嬉","description":"简单的工作，简单的生活","author":"跳过这片海","url":"https://hushaoyu.github.io","root":"/"},"pages":[{"title":"404","date":"2022-01-07T02:07:20.000Z","updated":"2022-01-07T02:09:03.921Z","comments":false,"path":"/404.html","permalink":"https://hushaoyu.github.io/404.html","excerpt":"","text":""},{"title":"categories","date":"2022-01-06T08:49:28.000Z","updated":"2022-01-06T09:45:21.681Z","comments":false,"path":"categories/index.html","permalink":"https://hushaoyu.github.io/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2022-01-06T08:50:17.000Z","updated":"2022-01-07T06:26:44.916Z","comments":false,"path":"tags/index.html","permalink":"https://hushaoyu.github.io/tags/index.html","excerpt":"","text":""},{"title":"intro","date":"2022-01-06T09:02:29.000Z","updated":"2022-01-06T09:45:21.676Z","comments":false,"path":"index.html","permalink":"https://hushaoyu.github.io/index.html","excerpt":"","text":""}],"posts":[{"title":"nodeppt - css","slug":"nodeppt-css","date":"2022-01-14T08:23:10.000Z","updated":"2022-01-14T08:23:32.120Z","comments":true,"path":"2022/01/14/nodeppt-css/","link":"","permalink":"https://hushaoyu.github.io/2022/01/14/nodeppt-css/","excerpt":"","text":"","categories":[{"name":"nodeppt","slug":"nodeppt","permalink":"https://hushaoyu.github.io/categories/nodeppt/"}],"tags":[{"name":"nodeppt","slug":"nodeppt","permalink":"https://hushaoyu.github.io/tags/nodeppt/"}]},{"title":"生成PPT - nodeppt","slug":"生成PPT-nodeppt","date":"2022-01-14T07:25:16.000Z","updated":"2022-01-14T08:22:29.628Z","comments":true,"path":"2022/01/14/生成PPT-nodeppt/","link":"","permalink":"https://hushaoyu.github.io/2022/01/14/%E7%94%9F%E6%88%90PPT-nodeppt/","excerpt":"全局安装脚本1$ npm install -g nodeppt github","text":"全局安装脚本1$ npm install -g nodeppt github 使用方法 命令 new：使用线上模板创建一个md文件 nodeppt new demo.md # 根据官方模板创建一个新的 slide 板块 nodeppt new demo.md -t username/repo # 根据 github 指定模板创建新的 slide板块 serve：启动一个指定的md文件预览 build：编译产出一个md文件 快捷键12345Page: ↑/↓/←/→ Space Home EndFullscreen: FOverview: -/+Speaker Note: NGrid Background: Enter 配置12345678910title: nodeppt markdown 演示speaker: 三水清url: https://github.com/ksky521/nodepptjs: - https://www.echartsjs.com/asset/theme/shine.jsprismTheme: solarizedlightplugins: - echarts - mermaid - katex title：演讲主题 speaker：演讲人 url：地址 js：需要加载的 js 文件数组，将被放在 body 标签之前 css：需要加载的 css 文件数组，将被放在 head 标签内 prismTheme：prism 配色，取值范围 [&#39;dark&#39;, &#39;coy&#39;, &#39;funky&#39;, &#39;okaidia&#39;, &#39;tomorrow&#39;, &#39;solarizedlight&#39;, &#39;twilight&#39;] plugins：主题配色插件，目前支持的有 echarts 、mermaid 、katex 语法","categories":[{"name":"PPT","slug":"PPT","permalink":"https://hushaoyu.github.io/categories/PPT/"},{"name":"nodeppt","slug":"PPT/nodeppt","permalink":"https://hushaoyu.github.io/categories/PPT/nodeppt/"}],"tags":[{"name":"nodeppt","slug":"nodeppt","permalink":"https://hushaoyu.github.io/tags/nodeppt/"},{"name":"PPT","slug":"PPT","permalink":"https://hushaoyu.github.io/tags/PPT/"}]},{"title":"React 基础开发框架搭建","slug":"React-基础开发框架搭建","date":"2022-01-14T02:02:01.000Z","updated":"2022-01-14T02:15:50.078Z","comments":true,"path":"2022/01/14/React-基础开发框架搭建/","link":"","permalink":"https://hushaoyu.github.io/2022/01/14/React-%E5%9F%BA%E7%A1%80%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA/","excerpt":"","text":"简介 &ensp;&ensp;Create React App 是一种官方支持的创建单页 React 应用程序的方式。它提供了一个没有配置的现代构建设置。","categories":[{"name":"React","slug":"React","permalink":"https://hushaoyu.github.io/categories/React/"},{"name":"create-react-app","slug":"React/create-react-app","permalink":"https://hushaoyu.github.io/categories/React/create-react-app/"}],"tags":[{"name":"React","slug":"React","permalink":"https://hushaoyu.github.io/tags/React/"},{"name":"框架搭建","slug":"框架搭建","permalink":"https://hushaoyu.github.io/tags/%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA/"},{"name":"creat-react-app","slug":"creat-react-app","permalink":"https://hushaoyu.github.io/tags/creat-react-app/"}]},{"title":"webpack - 技巧篇","slug":"webpack-技巧篇","date":"2022-01-14T01:56:14.000Z","updated":"2022-01-14T02:01:15.564Z","comments":true,"path":"2022/01/14/webpack-技巧篇/","link":"","permalink":"https://hushaoyu.github.io/2022/01/14/webpack-%E6%8A%80%E5%B7%A7%E7%AF%87/","excerpt":"","text":"打包图片资源 安装 loader1$ npm install --save-dev file-loader 在 webpack.config.js 文件的规则中添加配置1234&#123; test: /\\.(png|svg|jpg|gif)$/, use: [&#x27;file-loader&#x27;]&#125;","categories":[{"name":"webpack","slug":"webpack","permalink":"https://hushaoyu.github.io/categories/webpack/"}],"tags":[{"name":"webpack","slug":"webpack","permalink":"https://hushaoyu.github.io/tags/webpack/"}]},{"title":"CSS - 开发技巧","slug":"CSS-开发技巧","date":"2022-01-13T07:58:19.000Z","updated":"2022-01-13T08:10:15.365Z","comments":true,"path":"2022/01/13/CSS-开发技巧/","link":"","permalink":"https://hushaoyu.github.io/2022/01/13/CSS-%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7/","excerpt":"","text":"清除浮动的方法","categories":[{"name":"CSS","slug":"CSS","permalink":"https://hushaoyu.github.io/categories/CSS/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"https://hushaoyu.github.io/tags/CSS/"},{"name":"开发技巧","slug":"开发技巧","permalink":"https://hushaoyu.github.io/tags/%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7/"}]},{"title":"Hexo Note - 使用NexT主题","slug":"Hexo-Note-使用NexT主题","date":"2022-01-10T02:08:41.000Z","updated":"2022-01-11T03:30:03.253Z","comments":true,"path":"2022/01/10/Hexo-Note-使用NexT主题/","link":"","permalink":"https://hushaoyu.github.io/2022/01/10/Hexo-Note-%E4%BD%BF%E7%94%A8NexT%E4%B8%BB%E9%A2%98/","excerpt":"简介 &ensp;&ensp;«NexT» is a high quality elegant Hexo theme. It is crafted from scratch with love. 安装","text":"简介 &ensp;&ensp;«NexT» is a high quality elegant Hexo theme. It is crafted from scratch with love. 安装安装 进入hexo项目根目录，执行以下代码，将主题克隆至themes文件夹：12$ cd hexo$ git clone https://github.com/theme-next/hexo-theme-next themes/next 在项目的根配置文件 _config.yml 中，将 theme 的配置值修改为 next 应用主题，重新执行构建命令更新程序。1theme: next Tips：每次更新项目需要执行 hexo clean &amp;&amp; hexo g &amp;&amp; hexo s 才能应用本地更新，略显麻烦，可以在 package.json 文件中添加 start 命令，有改动只需要执行 npm start 就可以了1&quot;start&quot;: &quot;hexo clean &amp;&amp; hexo g &amp;&amp; gulp &amp;&amp; hexo s&quot; 配置主题切换 NexT默认集成了4中主题模式，Gemini、Mist、Muse、Pisces。在项目配置文件中修改 scheme 来应用不同的主题模式。 隐藏网站页面底部的 powered by 在文件 themes/next/layout/_partials/footer.swig 中，将 footer.powered 代码块使用 &lt;!-- --&gt; 注释掉。1234567891011&lt;!--&#123;%- if theme.footer.powered %&#125; &lt;div class=&quot;powered-by&quot;&gt; &#123;%- set next_site = &#x27;https://theme-next.org&#x27; %&#125; &#123;%- if theme.scheme !== &#x27;Gemini&#x27; %&#125; &#123;%- set next_site = &#x27;https://&#x27; + theme.scheme | lower + &#x27;.theme-next.org&#x27; %&#125; &#123;%- endif %&#125; &#123;&#123;- __(&#x27;footer.powered&#x27;, next_url(&#x27;https://hexo.io&#x27;, &#x27;Hexo&#x27;, &#123;class: &#x27;theme-link&#x27;&#125;) + &#x27; &amp; &#x27; + next_url(next_site, &#x27;NexT.&#x27; + theme.scheme, &#123;class: &#x27;theme-link&#x27;&#125;)) &#125;&#125; &lt;/div&gt;&#123;%- endif %&#125;--&gt; 文章添加阴影 在文件 themes/next/source/css/_common/components/post/post.styl 中添加如下样式：12345.post &#123; margin-top: 20px; -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5); -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5);&#125; 设置各板块的背景透明度 在文件 themes/next/source/css/_schemes/Pisces/_layout.styl 中可以看到，板块的 background 属性，配置的都是 --content-bg-color 变量，因此我们只需找到这个变量所在的位置进行修改既可以了。 在项目中搜索，可以找到是在 themes/next/source/css/_variables/base.styl 文件中进行配置的，将其值修改如下12$body-bg-color = rgba(255,255,255,.8);$content-bg-color = rgba(255,255,255,.8); 设置网站图标 favicon.ico 在文件夹 /themes/next/source/images 中，有不同场景不同格式的网站图标，根据格式进行替换。 其他可自定义配置图标 avatar.gif：网站个人介绍logo 修改博客底部标签样式 在文件 /themes/next/layout/_macro/post.swig 中，搜索 rel=&quot;tag&quot;，将#替换成 &lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt; 显示当前页面的浏览进度 NexT默认已经集成该功能，在主题配置文件中，将 scrollpercent 的配置值设置为 true，在页面右下角即可看到图标。123456back2top: enable: true # Back to top in sidebar. sidebar: false # Scroll percent label in b2t button. scrollpercent: true 修改链接文字样式 在文件 themes/next/source/css/_common/components/post/post.styl 中，添加以下代码12345678.post-body p a&#123; color: #0593d3; border-bottom: none; &amp;:hover &#123; color: #ff106c; text-decoration: underline; &#125;&#125; 设置头像的悬停效果 在主题配置文件中，找到 avatar 配置，将其 rotated 属性设置为 true12345678# Sidebar Avataravatar: # Replace the default image and set the url here. url: /images/avatar.gif # If true, the avatar will be dispalyed in circle. rounded: true # If true, the avatar will be rotated with the cursor. rotated: true 根据发布的博客自动生成首页 根目录执行代码，安装插件 hexo-excerpt1$ npm install hexo-excerpt --save 在主题配置文件中将 excerpt_description 的配置值设置为true，另外在根项目中增加以下内容：123456# 首页excerpt: depth: 2 #按层来算，也就是按代码块来算，截取博文多少层的内容来显示在主页 excerpt_excludes: [] more_excludes: [] hideWholePostExcerpts: true 在线预览 首页阅读更多按钮样式更改 在文件 themes/next/source/css/_common/components/post/post.styl 中添加如下样式：1234567.post-button .btn:hover &#123; color: rgb(255, 255, 255) !important; border-radius: 3px; font-size: 15px; box-shadow: inset 0px 0px 10px 0px rgba(0, 0, 0, 0.35); background-image: linear-gradient(90deg, #a166ab 0%, #ef4e7b 25%, #f37055 50%, #ef4e7b 75%, #a166ab 100%);&#125; 暗黑模式切换 根目录执行代码，安装插件 Hexo NexT Darkmode1$ npm install hexo-next-darkmode --save 在主题配置文件中，首先将NexT默认的暗黑主题设置为 false ： darkmode: false 之后添加如下配置：123456789101112131415darkmode_js: enable: true bottom: &#x27;64px&#x27; # default: &#x27;32px&#x27; right: &#x27;100px&#x27; # default: &#x27;32px&#x27; left: &#x27;unset&#x27; # default: &#x27;unset&#x27; time: &#x27;0.5s&#x27; # default: &#x27;0.3s&#x27; mixColor: &#x27;transparent&#x27; # default: &#x27;#fff&#x27; backgroundColor: &#x27;transparent&#x27; # default: &#x27;#fff&#x27; buttonColorDark: &#x27;#100f2c&#x27; # default: &#x27;#100f2c&#x27; buttonColorLight: &#x27;#fff&#x27; # default: &#x27;#fff&#x27; isActivated: true # default false saveInCookies: true # default: true label: &#x27;🌓&#x27; # default: &#x27;&#x27; autoMatchOsTheme: true # default: true libUrl: # Set custom library cdn url for Darkmode.js 默认激活暗黑/夜间模式，请始终与 saveInCookies: false、autoMatchOsTheme: false 一起使用 博文加密访问 NexT默认集成加密访问功能，在文件 themes/next/layout/_partials/head/head.swig 中添加如下代码：1234567891011#JavaScript&lt;script&gt; (function()&#123; if(&#x27;&#123;&#123; page.password &#125;&#125;&#x27;)&#123; if (prompt(&#x27;请输入密码&#x27;) !== &#x27;&#123;&#123; page.password &#125;&#125;&#x27;)&#123; alert(&#x27;密码错误&#x27;); history.back(); &#125; &#125; &#125;)();&lt;/script&gt; 之后在需要加密访问的博客中，在头部添加 password 配置即可开启：1password: 123456 默认的加密访问功能，在样式上并不优美，我们可以使用第三方的插件来实现这个功能。根项目安装插件1$ npm install --save hexo-blog-encrypt hexo-blog-encrypt 在根项目的配置文件中增加如下配置12encrypt: enable: true 然后和之前一样，在需要进行加密的博文中，配置相应的 password 属性即可生效。 这种将密码配置到博文中的方式，灵活性不足，如果需要统一配置和更改密码，需要在每个博文中修改一遍。为解决这种问题，插件允许通过指定 tag 来进行加密，并且不同的 tag 可以指定不同的密码。同样在根项目的配置文件中，修改之前的 encrypt 配置1234567891011# 文章加密访问encrypt: enable: true silent: true theme: surge tags: - &#123;name: encrypt, password: 123456&#125; abstract: 博文已加密，请提供密码查看！ message: 输入密码，查看文章 wrong_pass_message: 密码验证失败，请提供正确的密码. wrong_hash_message: 抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容. 设置 tags 属性，指定 tag 的 name 和 password 属性，同时在需要进行加密的博文中，设置此 tag 值1tags: [web, ThreeJS, React, encrypt] 增加文章字数统计及阅读时长功能 根项目中安装插件 hexo-symbols-count-time1$ npm install hexo-symbols-count-time --save 在主题配置文件中，搜索 symbols_count_time 配置，NexT默认已经集成此配置，安装插件后重新构建部署即可生效1234symbols_count_time: separated_meta: true item_text_post: true item_text_total: false 代码复制成功反馈 NexT默认已经集成代码复制功能，但是复制成功的反馈默认是禁用的，在主题配置文件中，搜索 codeblock ，将其 show_result 值设置为 true1234567codeblock: highlight_theme: &#x27;night eighties&#x27; copy_button: enable: true # Show text copy result. show_result: false style: flat 开启页面加载进度条 进入到next主题文件目录下执行命令，将插件克隆至主题文件中，文档1$ git clone https://github.com/theme-next/theme-next-pace source/lib/pace 在主题配置文件中，修改 pace 的配置，可以通过修改 theme 以应用不同的进度条主题样式。123456pace: enable: true # Themes list: # big-counter | bounce | barber-shop | center-atom | center-circle | center-radar | center-simple # corner-indicator | fill-left | flat-top | flash | loading-bar | mac-osx | material | minimal theme: minimal 博文支持评论 NexT支持多种评论插件，可选值有：changyan 、 disqus 、 disqusjs 、 gitalk | livere | valine，本文使用的是 valine 根据文档提示操作，注册账号、应用，获取到 appId 和 appKey，在主题配置文件中修改配置 设置当前评论模块使用的插件123456comments: # Available values: tabs | buttons style: tabs # Choose a comment system to be displayed by default. # Available values: changyan | disqus | disqusjs | gitalk | livere | valine active: valine valine 配置 appId 和 appKey，其他更多的配置参考官方文档说明1234valine: enable: true appid: xxxx # Your leancloud application appid appkey: xxxx # Your leancloud application appkey 集成网易云音乐 打开网易云网页版，搜索需要添加的歌曲，复制歌曲的外链信息，将其添加到 themes/next/layout/_macro/sidebar.swig 文件中，代码放置位置取决于你想让面板显示在哪个位置1234&lt;!-- 网易云音乐 --&gt;&lt;div id=&quot;music163player&quot;&gt; &lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=330 height=86 src=&quot;//music.163.com/outchain/player?type=2&amp;id=1901049671&amp;auto=1&amp;height=66&quot;&gt;&lt;/iframe&gt;&lt;/div&gt; 标签页美化 在 /themes/next/layout/ 目录下新建文件 tag-color.swig 文件，、填入以下代码1234567891011121314151617181920212223242526272829303132333435&lt;script type=&quot;text/javascript&quot;&gt; var alltags = document.getElementsByClassName(&#x27;tag-cloud-tags&#x27;); var tags = alltags[0].getElementsByTagName(&#x27;a&#x27;); for (var i = tags.length - 1; i &gt;= 0; i--) &#123; var r=Math.floor(Math.random()*75+130); var g=Math.floor(Math.random()*75+100); var b=Math.floor(Math.random()*75+80); tags[i].style.background = &quot;rgb(&quot;+r+&quot;,&quot;+g+&quot;,&quot;+b+&quot;)&quot;; &#125;&lt;/script&gt;&lt;style&gt; .tag-cloud-tags&#123; /*font-family: Helvetica, Tahoma, Arial;*/ /*font-weight: 100;*/ text-align: center; counter-reset: tags; &#125; .tag-cloud-tags a&#123; border-radius: 6px; padding-right: 5px; padding-left: 5px; margin: 8px 5px 0px 0px; &#125; .tag-cloud-tags a:before&#123; content: &quot;&quot;; &#125; .tag-cloud-tags a:hover&#123; box-shadow: 0px 5px 15px 0px rgba(0,0,0,.4); transform: scale(1.1); /*box-shadow: 10px 10px 15px 2px rgba(0,0,0,.12), 0 0 6px 0 rgba(104, 104, 105, 0.1);*/ transition-duration: 0.15s; &#125;&lt;/style&gt; 在 /themes/next/layout/page.swig 文件中引入上面新增的文件1234567&#123;%- if page.type === &#x27;tags&#x27; %&#125;&lt;div class=&quot;tag-cloud&quot;&gt; &lt;div class=&quot;tag-cloud-tags&quot; id=&quot;tags&quot;&gt; &#123;&#123; tagcloud(&#123;min_font: 16, max_font: 16, amount: 300, color: true, start_color: &#x27;#FFF&#x27;, end_color: &#x27;#FFF&#x27;&#125;) &#125;&#125; &lt;/div&gt;&lt;/div&gt;&#123;% include &#x27;tag-color.swig&#x27; %&#125; 重新构建部署项目，即可查看效果。在线预览 标签云 使用插件 hexo-tag-cloud1$ npm install hexo-tag-cloud --save 在 themes/next/layout/_macro/sidebar.swig 文件中添加如下代码，重新执行 npm start 可查看效果12345678910111213&lt;!-- 标签云 --&gt;&#123;% if site.tags.length &gt; 1 %&#125;&lt;script type=&quot;text/javascript&quot; charset=&quot;utf-8&quot; src=&quot;&#123;&#123; url_for(&#x27;/js/tagcloud.js&#x27;) &#125;&#125;&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot; charset=&quot;utf-8&quot; src=&quot;&#123;&#123; url_for(&#x27;/js/tagcanvas.js&#x27;) &#125;&#125;&quot;&gt;&lt;/script&gt;&lt;div class=&quot;widget-wrap&quot;&gt; &lt;h3 class=&quot;widget-title&quot;&gt;Tag Cloud&lt;/h3&gt; &lt;div id=&quot;myCanvasContainer&quot; class=&quot;widget tagcloud&quot;&gt; &lt;canvas width=&quot;250&quot; height=&quot;250&quot; id=&quot;resCanvas&quot; style=&quot;width:100%&quot;&gt; &#123;&#123; list_tags() &#125;&#125; &lt;/canvas&gt; &lt;/div&gt;&lt;/div&gt;&#123;% endif %&#125; 在根项目的配置文件中，增加对标签云的属性配置12345678# 标签云tag_cloud: textFont: Trebuchet MS, Helvetica # 字体 textColor: &#x27;#333&#x27; # 字体颜色 textHeight: 25 # 字体大小 outlineColor: &#x27;#E2E1D1&#x27; maxSpeed: 0.3 # 旋转速度 pauseOnSelected: false # 当选中对应标签时，是否停止转动 搜索 在根项目安装插件1$ npm install hexo-algolia --save NexT主题已经默认集成了一部分参数配置，并且在页面的左侧 Slider 区域也有搜索的快捷菜单，在主题配置文件中，搜索 algolia_search，将 enable 值设置为 true，启用该搜索功能。hits.per_page 表示搜索结果分页大小，labels 可以设置搜索匹配提示文本。 需要让搜索功能真正生效，还需要在根项目配置文件中增加 algolia 的账号配置信息12345# searchalgolia: applicationID: &quot;xxx&quot; apiKey: &quot;xxxxx&quot; indexName: &quot;indexName&quot; 配置的信息需要注册 algolia 账号才能获取。可点击 algolia 跳转进行注册。 注册账号后，注册一个应用，应用选择免费版本的。创建应用后在左侧菜单点击 Data Source，选择 Indices，创建一个新的索引，索引名称是博客网站需要配置的一个值，后面会用到。 回到 Overview 总览面板，点击 API Keys，在面板可以看到注册的应用的 application ID。创建新的key，其中的 Indices 选择之前创建的索引，下方的 ACL 权限控制，设置值为：search、addObject、deleteObject、addInde、deleteIndex，其他值默认，然后点击确认创建。 将上述生成的 application ID、apiKey、indexName 填入到配置文件中。 执行以下命令，将网站的博文生成可搜索的静态资源 每次博文有更新，需要部署时，都需要先执行以下命令，再执行构建部署命令，否则更新后的内容，在搜索数据库中是没有更新的。123$ export HEXO_ALGOLIA_INDEXING_KEY=&#x27;0f04bd99beb506cc014d144974134458&#x27;$ export HEXO_ALGOLIA_INDEXING_KEY$ hexo algolia 重新运行项目，点击左侧的搜索，正常情况下，会出现弹框，输入任意内容，即可显示出搜索结果","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://hushaoyu.github.io/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://hushaoyu.github.io/tags/Hexo/"}]},{"title":"Hexo Note - 命令","slug":"Hexo-Note-命令","date":"2022-01-09T07:17:57.000Z","updated":"2022-01-10T06:25:39.399Z","comments":true,"path":"2022/01/09/Hexo-Note-命令/","link":"","permalink":"https://hushaoyu.github.io/2022/01/09/Hexo-Note-%E5%91%BD%E4%BB%A4/","excerpt":"init1$ hexo init projectName 初始化 Hexo 网址项目，在上一节中已经提到过。Hexo Note - 初始化及常用配置","text":"init1$ hexo init projectName 初始化 Hexo 网址项目，在上一节中已经提到过。Hexo Note - 初始化及常用配置 new1$ hexo new [layout] &lt;title&gt; layout: 创建的页面类型。通常有post和page，默认是post，因此在使用时，省略此参数表明创建的是post类型的页面， post：普通的博文，会在首页和归档中列出。 page：独立的页面，不会展示在首页和归档页，如标签页、自定义的404页面等。 其他可选参数： 参数 描述 -p， --path 自定义新博文的路径 -r, --replace 如果存在同名博文，将其替换 -s, --slug 博文的 Slug，作为新博文的文件名和发布后的 URL &ensp;&ensp;默认情况下，Hexo 或根据permalink配置，及文件名称来决定博文生成的路径。如果创建的是独立页面，则使用文件名来在sources目录下生成相应的目录，并在目录下生成index.md文件。 generate1$ hexo generate 生成可直接访问的网站静态文件。其他可选参数： 参数 描述 -d, --deploy 文件生成后立即部署网站 -w, --watch 监视文件变动 -b, --bail 生成过程中如果发生任何未处理的异常则抛出异常 -f, --force 强制重新生成文件，Hexo 引入了差分机制，如果 public 目录存在，那么 hexo g 只会重新生成改动的文件。使用该参数的效果接近 hexo clean &amp;&amp; hexo generate -c, --concurrency 最大同时生成文件的数量，默认无限制 server1$ hexo server 本地启动服务器。默认情况下，访问网址为：http://localhost:4000/ 其他可选参数： 参数 描述 -p, --port 重新指定端口 -s, --static 只使用静态文件 -l, --log 启动日记记录，使用覆盖记录格式 clean1$ hexo clean 清除缓存文件 (db.json) 和已生成的静态文件 (public)。在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://hushaoyu.github.io/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://hushaoyu.github.io/tags/Hexo/"}]},{"title":"Hexo Note - 初始化及常用配置","slug":"Hexo-Note-初始化及常用配置","date":"2022-01-09T06:07:29.000Z","updated":"2022-01-10T06:25:39.390Z","comments":true,"path":"2022/01/09/Hexo-Note-初始化及常用配置/","link":"","permalink":"https://hushaoyu.github.io/2022/01/09/Hexo-Note-%E5%88%9D%E5%A7%8B%E5%8C%96%E5%8F%8A%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/","excerpt":"什么是 Hexo ？ &ensp;&ensp;Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析博文，在几秒内，即可利用靓丽的主题生成静态网页。 Markdown站内手册 Markdown官方手册","text":"什么是 Hexo ？ &ensp;&ensp;Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析博文，在几秒内，即可利用靓丽的主题生成静态网页。 Markdown站内手册 Markdown官方手册 安装前提安装前，确认机器环境已经安装 Git 和 Node (Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本)： 12345$ git --versiongit version 2.31.1.windows.1$ node -vv14.13.0 安装 Hexo&ensp;&ensp;全局安装hexo cli工具 1$ npm install -g hexo-cli 搭建网站初始化博客项目目录，并安装依赖12$ hexo init projectName$ cd projectName &amp;&amp; npm install &ensp;&ensp;构建后可以看到目录的基本结构，其中_.config.yml为网站的配置文件；source为资源文件，比如后续需要新建的博文，就是在这个目录下生成的；themes是主题文件夹，Hexo将根据这个目录下的资源配置，来渲染网站，生成页面。 12345678.├── _config.yml├── package.json├── scaffolds├── source| ├── _drafts| └── _posts└── themes 配置网站&ensp;&ensp;博客网站的网站标题、描述，以及网站的归属等信息设置 参数 描述 title 网站标题 subtitle 网站副标题 description 描述，主要用于SEO，建议准确描述网站内容，可使用关键字 keywords 关键字 author 网站作者 language 网站所使用的语言，可根据使用的主题提供的语言选项来进行设置，如zh-CN timezone 网站时区，中国大陆用户可以设置 Asia/Shanghai，具体可参见 时区列表 网址&ensp;&ensp;通常用于设置网站网址即博文的永久链接格式 参数 描述 默认值 url 网址，协议需要指定，如 http:// 或者 https:// permalink 博文的永久链接格式，具体格式可查看 永久链接格式 pretty_urls 改写 permalink 的值来美化 URL pretty_urls.trailing_index 是否在永久链接中保留尾部的 index.html，设置为 false 时去除 pretty_urls.trailing_html 是否在永久链接中保留尾部的 .html, 设置为 false 时去除 (对尾部的 index.html无效) true 其他更详细的配置说明，可查看 官网说明","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://hushaoyu.github.io/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://hushaoyu.github.io/tags/Hexo/"}]},{"title":"Markdown using document","slug":"Markdown-using-document","date":"2022-01-05T05:35:07.000Z","updated":"2022-01-10T06:25:39.378Z","comments":true,"path":"2022/01/05/Markdown-using-document/","link":"","permalink":"https://hushaoyu.github.io/2022/01/05/Markdown-using-document/","excerpt":"基本语法标题1、一个 ‘#’ 表示一级标题，两个表示二级标题，依此类推，对应 h1 ~ h6","text":"基本语法标题1、一个 ‘#’ 表示一级标题，两个表示二级标题，依此类推，对应 h1 ~ h6二级标题三级标题四级标题五级标题六级标题 段落1、直接使用空白行来标记行分割content1 content2 换行1、在内容末尾使用br，可创建换行例子：在内容末尾使用br，可创&lt;br /&gt;建换行例子：在内容末尾使用br，可创建换行 强调1、在需要强调的内容前后使用两个星号进行标记这段文字中，地名是需要强调的，如：**北京**是个美丽的城市，**杭州**也是这段文字中，地名是需要强调的，如：北京是个美丽的城市，杭州也是 引用1、块引用：使用 ‘&gt;’ 符号，多行引用，使用空 ‘&gt;’ 隔开 import import 2、嵌套引用：后面多一个 ‘&gt;’，表示被嵌套，如 ‘&gt;&gt;’ first second 3、包含其他Markdown语法的引用 content list Everything is going ware; 列表1、有序列表：使用数字加英文句号进行标记，英文句号需要与后续内容间隔一个空格语法才生效 第一行 第二行 2、无序列表：使用连字符 ‘-‘。子级列表，使用两个空格递进表示层级。 第一行 第二行 子行 代码1、代码块使用反引号包裹 ``这里面的是代码块内容，里层再次使用反引号，可识别Markdown语法，如``&lt;br /&gt;`` 标签就是被识别的效果 分割线1、分割线使用三个连续的星号（最佳实践：在星号前后使用空白行） 链接1、链接文本放在中括号内，链接地址放在紧跟其后的小括号内，小括号内第一个值为超链接，第二个使用双引号包裹的为title[这是一个链接](https://www.baidu.com &quot;这是一个百度地址&quot;)这是一个链接 2、带格式化的链接这是一个 **[百度](https://www.baidu.com &quot;这是一个百度地址&quot;)** 链接这是一个 百度 链接 图片1、与使用超链接类似，只是在最前面加了感叹号，中括号内的为图片的替代文本，即alt属性![这是图片](/assets/img/philly-magic-garden.jpg &quot;Magic Gardens&quot;) 2、带超链接的图片：先使用中括号包裹图片语法内容，再在中括号后面加一个小括号，放入超链接地址[![这是图片](https://upload.wikimedia.org/wikipedia/commons/a/a6/Future_Splash_Animator_icon.png &quot;Animate&quot;)](https://en.wikipedia.org/wiki/File:Future_Splash_Animator_icon.png) 转义符 内嵌 HTML 标签1、自定义样式使用样式自定义&lt;span style=&quot;color: rgb(255,3,255);margin: 0 5px;&quot;&gt;标签&lt;/span&gt;样式 使用样式自定义标签样式 扩展语法表格1、基本用法：使用管道符分割列，使用三个或多个连字符创建列标题| syntax | description | | --- | --- || header | title || name | value | | name | value | syntax description header title name value name value 2、内容对齐：在连字符前后加冒号，左边冒号表示左对齐，右边表示右对齐，两侧都有表示居中| syntax | description | other | | :--- | :---: | ---: || 1 | title | 1 || 1 | value | 1 | | 1 | value | 1 | syntax description other 1 title 1 1 value 1 1 value 1 围栏代码块1、使用三个反引号```包裹表示围栏代码块，如果只用单个反引号包裹，只会形成一行12345&#123; &quot;key&quot;: 1, &quot;name&quot;: &quot;test&quot;, &quot;value&quot;: 2&#125; &#123; &quot;key&quot;: 1, &quot;name&quot;: &quot;test&quot;, &quot;value&quot;: 2 &#125; 2、语法高亮：在第一个三个反引号后面，加上高亮所使用的语法，取值有：json、bash、javascript等 json：12345&#123; &quot;key&quot;: 1, &quot;name&quot;: &quot;test&quot;, &quot;value&quot;: 2&#125; bash：1$ midkr test javascript：12const a = &#x27;test&#x27;;console.log(a); 脚注1、方括号内，使用上标符号接其他标识符这里面的内容包含[^1]脚注。 [^1]: this is a 标题ID和锚点1、标题内容使用内嵌html标签的形式提供id### &lt;span id=&quot;extend-table&quot;&gt;表格&lt;/span&gt; 2、使用中括号包含描点文本内容，后接小括号提供id[跳至表格](#extend-table)跳至表格 删除线1、使用双波浪号~~~~内容删除~~内容删除 任务列表语法1、使用 -/*/+ 和方括号表示，方括号内输入x表示任务已完成。方括号前后均需空格，空复选框也需要空格123- [x] 起床* [ ] 洗漱+ [ ] 吃早餐 起床 洗漱 吃早餐 使用emoji表情12- 🏜️ 第一次使用表情- 🎄 圣诞树 其他中文段落缩进两个字符,使用&amp;ensp;；&amp;ensp;&amp;ensp;这是一段缩进两个字符的文本&ensp;&ensp;这是一段缩进两个字符的文本 站内博文间跳转 相对路径 在站点的根配置文件中，permalink参数指定了博文的生成格式：permalink: :year/:month/:day/:title/，因此在是使用相对路径时，需要根据日期递归到根目录再寻址到需要跳转的博文路径：12345 [Markdown站内手册](../../../../2022/01/05/Markdown-using-document)```- 绝对路径 - 同样根据博文的生成格式，将博文从根路径开始，将绝对路径表示出来： ```bash [Markdown站内手册](/2022/01/05/Markdown-using-document) post_link 待研究","categories":[{"name":"handbook","slug":"handbook","permalink":"https://hushaoyu.github.io/categories/handbook/"},{"name":"Markdown","slug":"handbook/Markdown","permalink":"https://hushaoyu.github.io/categories/handbook/Markdown/"}],"tags":[{"name":"Markdown","slug":"Markdown","permalink":"https://hushaoyu.github.io/tags/Markdown/"},{"name":"handbook","slug":"handbook","permalink":"https://hushaoyu.github.io/tags/handbook/"}]},{"title":"There.js入门系列之React中使用Three.js","slug":"There-js入门系列之React中使用Three-js","date":"2022-01-05T05:27:18.000Z","updated":"2022-01-07T03:21:35.579Z","comments":true,"path":"2022/01/05/There-js入门系列之React中使用Three-js/","link":"","permalink":"https://hushaoyu.github.io/2022/01/05/There-js%E5%85%A5%E9%97%A8%E7%B3%BB%E5%88%97%E4%B9%8BReact%E4%B8%AD%E4%BD%BF%E7%94%A8Three-js/","excerpt":"博文已加密，请提供密码查看！","text":"4630436162ade97ba2718b7d0c4b3b6351ade09e539dfebeb5402828e29e64b0f41eb1e0ff1190f7511b2f172bf61b91eebc2f7ad92bd458a943c3f388d15fd6ffb2ab5dcdd5ca5be7a53be65b3149bb68de244f810ed966192b82228cdc362f088736edaaebe931c47c95f67ac4e50728df6f82eadb0a90e5cfe6620d8a8a6eb19dbbeee5ff4bee397f5e2a06331e852650d318beb5578cbbdda3c37d25f099a3b7f7493d41b725f14299d4e561a775c7cebf554da7b204f69b22c85a4f4d8ebc9b3826ec2750cc9e1ea4ad32fad91d2ebc6ab087580e18304105159ef6f69a27d67bdefafb0d2f7628aa0422745e7726a829b9b2d293c9a0c0832bbc6f5e881ceb4e79c6a082d5afd0578a69d56fc0d8a964539a0f1771a5f25c207c236714cb234097a0e3e7232895ac7cf6342358acd594c34693d181d93ad985f5a6651087a80c93c4a7bbb8f3348ed6cdc6d175 输入密码，查看文章","categories":[{"name":"web","slug":"web","permalink":"https://hushaoyu.github.io/categories/web/"},{"name":"ThreeJS","slug":"web/ThreeJS","permalink":"https://hushaoyu.github.io/categories/web/ThreeJS/"}],"tags":[{"name":"React","slug":"React","permalink":"https://hushaoyu.github.io/tags/React/"},{"name":"web","slug":"web","permalink":"https://hushaoyu.github.io/tags/web/"},{"name":"ThreeJS","slug":"ThreeJS","permalink":"https://hushaoyu.github.io/tags/ThreeJS/"},{"name":"encrypt","slug":"encrypt","permalink":"https://hushaoyu.github.io/tags/encrypt/"}]},{"title":"Hello World","slug":"hello-world","date":"2022-01-04T08:06:28.571Z","updated":"2022-01-06T09:15:07.591Z","comments":true,"path":"2022/01/04/hello-world/","link":"","permalink":"https://hushaoyu.github.io/2022/01/04/hello-world/","excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"test","slug":"test","permalink":"https://hushaoyu.github.io/categories/test/"}],"tags":[{"name":"test","slug":"test","permalink":"https://hushaoyu.github.io/tags/test/"}]}],"categories":[{"name":"nodeppt","slug":"nodeppt","permalink":"https://hushaoyu.github.io/categories/nodeppt/"},{"name":"PPT","slug":"PPT","permalink":"https://hushaoyu.github.io/categories/PPT/"},{"name":"nodeppt","slug":"PPT/nodeppt","permalink":"https://hushaoyu.github.io/categories/PPT/nodeppt/"},{"name":"React","slug":"React","permalink":"https://hushaoyu.github.io/categories/React/"},{"name":"create-react-app","slug":"React/create-react-app","permalink":"https://hushaoyu.github.io/categories/React/create-react-app/"},{"name":"webpack","slug":"webpack","permalink":"https://hushaoyu.github.io/categories/webpack/"},{"name":"CSS","slug":"CSS","permalink":"https://hushaoyu.github.io/categories/CSS/"},{"name":"Hexo","slug":"Hexo","permalink":"https://hushaoyu.github.io/categories/Hexo/"},{"name":"handbook","slug":"handbook","permalink":"https://hushaoyu.github.io/categories/handbook/"},{"name":"Markdown","slug":"handbook/Markdown","permalink":"https://hushaoyu.github.io/categories/handbook/Markdown/"},{"name":"web","slug":"web","permalink":"https://hushaoyu.github.io/categories/web/"},{"name":"ThreeJS","slug":"web/ThreeJS","permalink":"https://hushaoyu.github.io/categories/web/ThreeJS/"},{"name":"test","slug":"test","permalink":"https://hushaoyu.github.io/categories/test/"}],"tags":[{"name":"nodeppt","slug":"nodeppt","permalink":"https://hushaoyu.github.io/tags/nodeppt/"},{"name":"PPT","slug":"PPT","permalink":"https://hushaoyu.github.io/tags/PPT/"},{"name":"React","slug":"React","permalink":"https://hushaoyu.github.io/tags/React/"},{"name":"框架搭建","slug":"框架搭建","permalink":"https://hushaoyu.github.io/tags/%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA/"},{"name":"creat-react-app","slug":"creat-react-app","permalink":"https://hushaoyu.github.io/tags/creat-react-app/"},{"name":"webpack","slug":"webpack","permalink":"https://hushaoyu.github.io/tags/webpack/"},{"name":"CSS","slug":"CSS","permalink":"https://hushaoyu.github.io/tags/CSS/"},{"name":"开发技巧","slug":"开发技巧","permalink":"https://hushaoyu.github.io/tags/%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7/"},{"name":"Hexo","slug":"Hexo","permalink":"https://hushaoyu.github.io/tags/Hexo/"},{"name":"Markdown","slug":"Markdown","permalink":"https://hushaoyu.github.io/tags/Markdown/"},{"name":"handbook","slug":"handbook","permalink":"https://hushaoyu.github.io/tags/handbook/"},{"name":"web","slug":"web","permalink":"https://hushaoyu.github.io/tags/web/"},{"name":"ThreeJS","slug":"ThreeJS","permalink":"https://hushaoyu.github.io/tags/ThreeJS/"},{"name":"encrypt","slug":"encrypt","permalink":"https://hushaoyu.github.io/tags/encrypt/"},{"name":"test","slug":"test","permalink":"https://hushaoyu.github.io/tags/test/"}]}